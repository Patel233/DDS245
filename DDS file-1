Algorithm to perform Infix and Postfix operation
=====================================================================================================================
a.If symbol is an operand                     5+3*(5-2)+7             53+52-*7+
-Perform that symbol onto the screen.
b.If symbol is a left parenthesis
-Push it on the stack.
c.If symbol is a right parenthesis
-Pop all the operators from the stack upto first left parenthsis and print them on the screen.
-Discard the left & right parenthesis.
d.If the symbol is an operator-
  if the precedence of the operators in the stack are greater or equal to the current operator then pop the operators out of the stack 7 print onto the screen 7 push the current operator onto the stack
else:
     Push the current operator onto the stack.
3*(5-2)+1

Precedence order
============================================
Parenthesis-{},(),[]
Exponential Notation-^
Multiplication & Division-*,/
addition & subtration-+,-

Associativity
================================================
*,/ -left to right
+- -left to right
^ -right to left

Infix & Prefix
=================================================
Infix - <operand><operator><operand> A+B
Prefix - <operator><operand><operand>+AB
Postfix - <operand><operand><operator>AB+
=================================================================================================================================================================================================================

#include <stdio.h>
#include <string.h>

char infix[10], postfix[10],st[10];
int top=-1;
int l,i,j;

char c,k,ct;

void push(char c1)
{
    top++;
    st[top]= c1;
}

char pop()
{
    char c1;
    
    c1 = st[top];
    top--;
    
    return(c1);
}

int prio (char c1)
{
    if(c1 == '+' || c1 =='-')
    return 1;
    else if(c1 == '*' || c1 == '/')
    return 2;
}
int main()
{
    printf("given infix exprn \n");
    scanf("%s",infix);
    
    l = strlen(infix);
    printf("infix string length is %d \n",l);
    
    j=0;
    for(i=0;i<1;)
    {
        c = infix[i];
        ct = st[top];
        
        if(c =='2' || c=='7' || c=='6' ||c =='5' || c=='4' || c=='1' || c =='3' || c=='4')
        {
            postfix[j++] == c;
            i++;
        }
        else if (prio(c) >prio(ct)|| (top == -1))
        {
            push(c);
            i++;
        }
        else
        {
            k = pop();
            postfix[j++] = k;
            
        }
    }
    while(top != -1)
    {
        k = pop();
        postfix[j++] =k;
    }
    printf("finsl postfix exprn is %n", postfix);
    return 0;
}



